--Part A:
create table readcsv(
	line text
);

copy readcsv FROM 'C:\Users\user\Desktop\hw3\a_room_with_a_view.csv' DELIMITER E'\t' QUOTE E'\b' NULL AS '\N' CSV;


create table docs(
	id integer generated by default as identity( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ) , 
	paragraph text NOT NULL ,
	CONSTRAINT docs_pkey PRIMARY KEY (id)
);

insert into docs (paragraph) select line from readcsv;

ALTER TABLE docs ADD "paragraph_tsv" tsvector;
CREATE INDEX idx_fts_title_vec ON docs USING gin(paragraph_tsv);

UPDATE docs
SET paragraph_tsv = to_tsvector(paragraph);

--Part B:

-- 1.Βρείτε το πλήθος των docs που περιέχουν τους όρους ‘love’ ή ‘world’.

select count(*) from docs where paragraph_tsv @@ to_tsquery('love | world');

--2.Βρείτε το πλήθος των docs που περιέχουν τους όρους ‘love’ και ‘world’.

select count(*) from docs where paragraph_tsv @@ to_tsquery('love & world');

--3.Βρείτε όλα τα docs που περιέχουν τους όρους ‘Cecil’ και ‘Freddy’. Κατατάξτε τις
--απαντήσεις με τη χρήση της συνάρτησης ts_rank_cd σε φθίνουσα κατάταξη.

select *,ts_rank_cd(paragraph_tsv, query) 
as rank from docs ,to_tsquery('Cecil & Freddy') query
where paragraph_tsv @@  to_tsquery('Cecil & Freddy')
order by rank desc;

--4. Βρείτε τους top 10 όρους (terms) ως προς το document frequency.

SELECT * FROM ts_stat('SELECT paragraph_tsv  FROM docs')  
ORDER BY ndoc DESC
LIMIT 10;

--5.Βρείτε τους top 10 όρους (terms) ως προς το collection frequency.

SELECT * FROM ts_stat('SELECT paragraph_tsv  FROM docs') 
ORDER BY nentry DESC
LIMIT 10;